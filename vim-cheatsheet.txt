MY SUPER COOL VIM CHEATSHEET

Basics
------------------------------------------
hl--left, right
jk-down, up
	examples: 6h=6 characters to left
	100j=100 lines down

gg-top of page
G-end of page
$-end of line
a-to go to end of char (instead of i for before)
^-start of current line with non-blank character
0-start of current line
%-move to matching bracket when cursor is already on a bracket (), [], {}
CtrlC/Esc-change mode
E-move to end of word
W-move to start of word
B-count words backward
x-to cut my visual block code
p-to paste
dd-delete a line
ctrl b = up a page
ctrl f = down a page
ctrl u = 1/2 screen up
ctrl d = 1/2 screen down
ctrl y = scroll up
ctrl e = scroll the window downwards
u = undo last edit
A = insert content after everything (move cursor to end of the line and enter insert mode)
o = open a new line below the current one and move into insert mode
O = open a new line above the current one  and move into insert mode
f<char> = find char after cursor
F<char> = find char before cursor
^^ after using one of the f's, you can move vertically to next matching char with ; or last matching char with ,

CTRL -r = redo
CTRL-@		Insert previously inserted text and stop insert.

						*i_CTRL-A*
CTRL-A		Insert previously inserted text.

						*i_CTRL-H* *i_<BS>* *i_BS*
<BS> or CTRL-H	Delete the character before the cursor (see |i_backspacing|
		about joining lines).
						*i_CTRL-W*
CTRL-W		Delete the word before the cursor
						*i_CTRL-U*
CTRL-U		Delete all entered characters before the cursor in the current
		line.  If there are no newly entered characters and
		'backspace' is not empty, delete all characters before the
		cursor in the current line.
						*i_CTRL-U-default*
		By default, sets a new undo point before deleting.
		|default-mappings|
						*i_CTRL-J* *i_<NL>*
<NL> or CTRL-J	Begin new line.
						*i_CTRL-M* *i_<CR>*
<CR> or CTRL-M	Begin new line.
						*i_CTRL-K*


Modes
-----------------------------------
Insert (i)
Normal/Command
Visual (v)
Visual block
(a) for going after a char (or word?)

Deletion
---------------------------
Go into visual mode
use d to delete
use x to cut

Searching
------------------------------------
/ allows you to search -> then hit Enter
n is next found occurence
N is previous occurence
In Normal mode for word under cursor, *=search forward, #=search backword

Editing Multiple Files
----------------------------------
nvim file1.txt file2.txt file3.txt
:edit file2.txt within file1.txt
buffers which I don't want to get into yet
split screen is :sp <filename>

Key mapping
---------------------------------------
nnoremap = command to create a non-recursive mapping in normal mode (mapping will not call itself if defined in its own mapping sequence)
<silent> = suppresses command output that appears at the bottom of the screen when mapped keys are pressed
<cr> = carriage return and simulates pressing the Enter key

Operators 
---------------------------------------
d = delete
c = change
y = yank (copy)
p = put (paste)

Text Objects
--------------------------------
diw = delete inside the worde (delete current word under cursor)
ciw = change inside the word (delete current word under cursor and switch to insert mode)
dip = delete inside paragraph
viw = select a word

Editing multiple lines
-------------------------------
go into visual block mode
select all lines you'd like to edit
press 'I'
put in text needed
press Esc

Buffers
----------------------------------
buffer management :b
jump/change lists (ctrl i and g;)
alternate file ^

workflow (from StackOverflow that I will try):
use :e to open a buffer
use :e to open another file--to toggle between two, use :sp and :vsp to open it in a separate window
repeat

to close buffer without closing vsp, do bp|bd # (go to previous buffer, then delete buffer just moved away from)

Plugins
------------------------------------
Use :PlugInstall to install all plugins for VimPlug
use syntax Plug 'nameOfPlugin'

Find and Replace
---------------------------------------
basic search and replace = :%s/foo/bar/g
search and replace in range oflines :startline,endline s/pattern/replacement/g
case insensitive search and replace by appending i flag like this :%s/foo/bar/gi
search and replace with confirmation before each substitution, use c flag like this :%s/foo/bar/gc

Intro
- Bram Moolenar wrote all of Vim and basically all of the commits in Vim has his name on it--hence NeoVim-> 
