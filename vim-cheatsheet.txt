MY SUPER COOL VIM CHEATSHEET

Basics
------------------------------------------
hl--left, right
jk-down, up
	examples: 6h=6 characters to left
	100j=100 lines down

gg-top of page
G-end of page
$-end of line
a-to go to end of char (instead of i for before)
^-start of current line with non-blank character
0-start of current line
%-move to matching bracket when cursor is already on a bracket (), [], {}
CtrlC/Esc-change mode
E-move to end of word
W-move to start of word
B-count words backward
x-to cut my visual block code
p-to paste
gM - goes to the middle of the line
80gM - goes to 80% of the line width
r-use to replace one character under the cursor
dd-delete a line
ctrl b = up a page
ctrl f = down a page
ctrl u = 1/2 screen up
ctrl d = 1/2 screen down
ctrl y = scroll up
ctrl e = scroll the window downwards
ctrl g = shows filename and position in the file
u = undo last edit
A = insert content after everything (move cursor to end of the line and enter insert mode)
o = open a new line below the current one and move into insert mode
O = open a new line above the current one  and move into insert mode
f<char> = find char after cursor
F<char> = find char before cursor
^^ after using one of the f's, you can move vertically to next matching char with ; or last matching char with ,

CTRL -r = redo
CTRL-@		Insert previously inserted text and stop insert.

						*i_CTRL-A*
CTRL-A		Insert previously inserted text.

						*i_CTRL-H* *i_<BS>* *i_BS*
<BS> or CTRL-H	Delete the character before the cursor (see |i_backspacing|
		about joining lines).
						*i_CTRL-W*
CTRL-W		Delete the word before the cursor
						*i_CTRL-U*
CTRL-U		Delete all entered characters before the cursor in the current
		line.  If there are no newly entered characters and
		'backspace' is not empty, delete all characters before the
		cursor in the current line.
						*i_CTRL-U-default*
		By default, sets a new undo point before deleting.
		|default-mappings|
						*i_CTRL-J* *i_<NL>*
<NL> or CTRL-J	Begin new line.
						*i_CTRL-M* *i_<CR>*
<CR> or CTRL-M	Begin new line.
						*i_CTRL-K*


Modes
-----------------------------------
Insert (i)
Normal/Command
Visual (v)
Visual block
(a) for going after a char (or word?)

Deletion
---------------------------
Go into visual mode
use d to delete
use x to cut

Searching
------------------------------------
/ allows you to search -> then hit Enter
:noh = to clear highlights after search
n is next found occurence
N is previous occurence
In Normal mode for word under cursor, *=search forward, #=search backword

Editing Multiple Files
----------------------------------
nvim file1.txt file2.txt file3.txt
:edit file2.txt within file1.txt
split screen is :sp <filename>
vertical split screen is :vsp

Key mapping
---------------------------------------
nnoremap = command to create a non-recursive mapping in normal mode (mapping will not call itself if defined in its own mapping sequence)
<silent> = suppresses command output that appears at the bottom of the screen when mapped keys are pressed
<cr> = carriage return and simulates pressing the Enter key

Operators 
---------------------------------------
d = delete
c = change
y = yank (copy)
p = put (paste)

Text Objects
--------------------------------
diw = delete inside the worde (delete current word under cursor)
ciw = change inside the word (delete current word under cursor and switch to insert mode)
dip = delete inside paragraph
viw = select a word

Editing multiple lines
-------------------------------
go into visual block mode
select all lines you'd like to edit
press 'I'
put in text needed
press Esc

Buffers
----------------------------------
buffer management :b
:bnext or :bn = move to next buffer
:bprevious or :bp = move to prev buffer
:bfirst or :bf = move to first buffer
:blast or :bl = move to last buffer
CTRL-^ = switch to the alternate buffer
:bufdo <command> = apply a command on all buffers

to create a buffer: opening a window->buffer will be created automatically
:badd <filename> = add filename to buffer list

to delete a buffer: 
:bdelete <ID_or_name>
:1,10bdeleete = delete all buffers from ID 1-10, inclusive
:%bdelete = delete all buffers 

workflow (from StackOverflow that I will try):
use :e to open a buffer
use :e to open another file--to toggle between two, use :sp and :vsp to open it in a separate window
repeat

to close buffer without closing vsp, do bp|bd # (go to previous buffer, then delete buffer just moved away from)

Vim Windows
-------------------------------------------
CTRL-W s = split window horizontally
CTRL-W v = split window vertically
CTRL-W n = split current windows horizontally and edit a new file
CTRL-W ^ = split current with the alternate file (buffer with # indicator in buffer list)
<bufferID> CTRL-W ^ = split windows with the buffer of ID <bufferID>

Plugins
------------------------------------
Use :PlugInstall to install all plugins for VimPlug
use syntax Plug 'nameOfPlugin'

Find and Replace
---------------------------------------
basic search and replace = :s/foo/bar/g
search and replace in range oflines :#,#s/pattern/replacement/g
case insensitive search and replace by appending i flag like this :%s/foo/bar/gi
search and replace with confirmation before each substitution, use c flag like this :%s/foo/bar/gc

Put
-----------------------------
p = put last thing in register AFTER the cursor
P = put last thing in register BEFORE the cursor

Change
---------------------------------
ce = change from cursor to end of word
c$ = change from cursor to end of line

Execute an External Command
-----------------------------------
:! followed by external command to execute that command

Writing to files
------------------------------------
:w <filename> to save it to a new file with name filename
1. use visual selection and choose what lines to put into a file
2. press : and :'<,'> will appear. add w <filename> to write the selected lines to <filename>

Retrieving and Merging Files 
-------------------------------------
to retrieve contents of a file, type :r <filename>
can also read the output of an external command -- example :r !ls

ArgList
-------------------------------------
:args = display arglist
:argadd = add file to the arglist
:argdo = execute a command on every file in the arglist
:next = move to the next file in the arglist
:prev = move to the previous file in the arglist
:first = move to the first file in the arglist

Definitions
--------------------------------------
* buffer is the in-mmeory text of a file
* window is a viewport on a buffer
* tab page is a collection of windows
* argument list is a container that allows you to organize your open files--stable subset of the buffer list, it stays the same unless you explicity modify it 

Intro
- Bram Moolenar wrote all of Vim and basically all of the commits in Vim has his name on it--hence NeoVim-> 
